/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 28 17:42:23 GMT 2018
 */

package esfinge.cnext;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import esfinge.cnext.metric.MemoryMetricsGenerator;
import esfinge.cnext.factories.Metrics;
import esfinge.cnext.metric.TimeMetricsGenerator;
import esfinge.cnext.factories.Selector;
import esfinge.cnext.selector.SelectorWithPersistence;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ABTestProxy_ESTest extends ABTestProxy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ABTestProxy<Object> aBTestProxy0 = new ABTestProxy<Object>();
      SelectorWithPersistence selectorWithPersistence0 = new SelectorWithPersistence("=lV$ER4$UhotGn7U");
      aBTestProxy0.setSelector(selectorWithPersistence0);
      Selector selector0 = aBTestProxy0.getSelector();
      assertSame(selector0, selectorWithPersistence0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ABTestProxy<Object> aBTestProxy0 = new ABTestProxy<Object>();
      LinkedList<Metrics> linkedList0 = new LinkedList<Metrics>();
      aBTestProxy0.setMetrics(linkedList0);
      List<Metrics> list0 = aBTestProxy0.getMetrics();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ABTestProxy<Object> aBTestProxy0 = new ABTestProxy<Object>();
      LinkedList<Metrics> linkedList0 = new LinkedList<Metrics>();
      TimeMetricsGenerator timeMetricsGenerator0 = new TimeMetricsGenerator();
      linkedList0.offerFirst(timeMetricsGenerator0);
      aBTestProxy0.setMetrics(linkedList0);
      List<Metrics> list0 = aBTestProxy0.getMetrics();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ABTestProxy<String> aBTestProxy0 = new ABTestProxy<String>();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      aBTestProxy0.setImplementations(classArray0);
      Class[] classArray1 = aBTestProxy0.getImplementations();
      assertEquals(2, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ABTestProxy<Object> aBTestProxy0 = new ABTestProxy<Object>();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      aBTestProxy0.setImplementations(classArray0);
      Class[] classArray1 = aBTestProxy0.getImplementations();
      assertEquals(0, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SelectorWithPersistence selectorWithPersistence0 = new SelectorWithPersistence();
      Class<MemoryMetricsGenerator>[] classArray0 = (Class<MemoryMetricsGenerator>[]) Array.newInstance(Class.class, 0);
      Class<Integer>[] classArray1 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      Class<Integer> class0 = Integer.class;
      classArray1[0] = class0;
      selectorWithPersistence0.select(classArray1);
      ABTestProxy<MemoryMetricsGenerator> aBTestProxy0 = new ABTestProxy<MemoryMetricsGenerator>();
      aBTestProxy0.setSelector(selectorWithPersistence0);
      try { 
        aBTestProxy0.invoke(class0, (Method) null, classArray0);
        fail("Expecting exception: InstantiationException");
      
      } catch(InstantiationException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ABTestProxy<MemoryMetricsGenerator> aBTestProxy0 = new ABTestProxy<MemoryMetricsGenerator>();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      aBTestProxy0.setImplementations(classArray0);
      MemoryMetricsGenerator memoryMetricsGenerator0 = new MemoryMetricsGenerator();
      SelectorWithPersistence selectorWithPersistence0 = new SelectorWithPersistence("!(ER:h1f");
      aBTestProxy0.setSelector(selectorWithPersistence0);
      Object[] objectArray0 = new Object[3];
      try { 
        aBTestProxy0.invoke(memoryMetricsGenerator0, (Method) null, objectArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ABTestProxy<MemoryMetricsGenerator> aBTestProxy0 = new ABTestProxy<MemoryMetricsGenerator>();
      MemoryMetricsGenerator memoryMetricsGenerator0 = new MemoryMetricsGenerator();
      SelectorWithPersistence selectorWithPersistence0 = new SelectorWithPersistence();
      Class<TimeMetricsGenerator>[] classArray0 = (Class<TimeMetricsGenerator>[]) Array.newInstance(Class.class, 4);
      Class<TimeMetricsGenerator> class0 = TimeMetricsGenerator.class;
      classArray0[0] = class0;
      LinkedList<Metrics> linkedList0 = new LinkedList<Metrics>();
      linkedList0.add((Metrics) memoryMetricsGenerator0);
      aBTestProxy0.setMetrics(linkedList0);
      selectorWithPersistence0.select(classArray0);
      aBTestProxy0.setSelector(selectorWithPersistence0);
      try { 
        aBTestProxy0.invoke(memoryMetricsGenerator0, (Method) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("esfinge.cnext.ABTestProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ABTestProxy<Class<Object>> aBTestProxy0 = new ABTestProxy<Class<Object>>();
      Selector selector0 = aBTestProxy0.getSelector();
      assertNull(selector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ABTestProxy<Object> aBTestProxy0 = new ABTestProxy<Object>();
      List<Metrics> list0 = aBTestProxy0.getMetrics();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ABTestProxy<Integer> aBTestProxy0 = new ABTestProxy<Integer>();
      // Undeclared exception!
      try { 
        aBTestProxy0.getImplementations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("esfinge.cnext.ABTestProxy", e);
      }
  }
}
