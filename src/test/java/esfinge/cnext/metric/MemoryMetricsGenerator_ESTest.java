/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 28 17:46:14 GMT 2018
 */

package esfinge.cnext.metric;

import org.junit.Test;
import static org.junit.Assert.*;

import esfinge.cnext.factories.MetricRecorder;

import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MemoryMetricsGenerator_ESTest extends MemoryMetricsGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MemoryMetricsGenerator memoryMetricsGenerator0 = new MemoryMetricsGenerator();
      MetricRecorder metricRecorder0 = memoryMetricsGenerator0.getMetricRecorder();
      assertNull(metricRecorder0);
      
      memoryMetricsGenerator0.setMetricRecorder((MetricRecorder) null);
      memoryMetricsGenerator0.setMetricRecorder((MetricRecorder) null);
      memoryMetricsGenerator0.getMetricRecorder();
      memoryMetricsGenerator0.setMetricRecorder((MetricRecorder) null);
      memoryMetricsGenerator0.getMetricRecorder();
      memoryMetricsGenerator0.getMetricRecorder();
      memoryMetricsGenerator0.getMetricRecorder();
      Method method0 = null;
      memoryMetricsGenerator0.startRecording(method0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MemoryMetricsGenerator memoryMetricsGenerator0 = new MemoryMetricsGenerator();
      MetricRecorderFile metricRecorderFile0 = new MetricRecorderFile("PR>F");
      MetricResult metricResult0 = new MetricResult("PR>F", "PR>F", "esfinge.cnext.metric.MetricResult", "", "esfinge.cnext.metric.MetricRecorderLogger");
      metricRecorderFile0.save(metricResult0);
      memoryMetricsGenerator0.setMetricRecorder(metricRecorderFile0);
      MetricRecorderLogger metricRecorderLogger0 = new MetricRecorderLogger();
      memoryMetricsGenerator0.setMetricRecorder(metricRecorderLogger0);
      MetricRecorder metricRecorder0 = memoryMetricsGenerator0.getMetricRecorder();
      memoryMetricsGenerator0.setMetricRecorder(metricRecorderLogger0);
      MetricRecorder metricRecorder1 = memoryMetricsGenerator0.getMetricRecorder();
      assertSame(metricRecorder1, metricRecorder0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MemoryMetricsGenerator memoryMetricsGenerator0 = new MemoryMetricsGenerator();
      MetricRecorderLogger metricRecorderLogger0 = new MetricRecorderLogger();
      memoryMetricsGenerator0.setMetricRecorder(metricRecorderLogger0);
  }
}
